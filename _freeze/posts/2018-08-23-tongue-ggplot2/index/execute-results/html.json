{
  "hash": "e81f1f23c23b48a643ee4340805efbd2",
  "result": {
    "markdown": "---\ntitle: Plotting tongue contours with ggplot2\nauthor: Stefano Coretta\ndate: '2018-08-23'\n\ncategories:\n  - Linguistics\ntags:\n  - rstats\n  - phonetics\n  - phonology\n  - data viz\n  - uti\n  - ultrasound\n  - tongue contours\n---\n\n\n\n\n\n\nWhen plotting tongue contours data obtained from ultrasound tongue imaging in `R` using `ggplot2`, a common option to smooth over the individual contours and show the general pattern is to use `geom_smooth(methood = \"loess\")`. However, as I will show in this post, in certain cases this method leads to very disorted contours. Such distortion is more or less always present, although at a lower degree in less extreme cases.\n\nTo show the shortcomings of using `geom_smooth()` and present a viable alternative, we'll be using ultrasound tongue imaging data from one speaker (me). This dataset includes tongue contours from within the closure of the conosonants /t, d/ preceeded by /a, o, u/. The dataset looks like this (some columns dropped):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(tongue_data, rec_date, fan_line, X, Y, word, vowel, c2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,239 × 7\n   rec_date            fan_line     X     Y word  vowel c2   \n   <chr>                  <int> <dbl> <dbl> <chr> <chr> <chr>\n 1 29/11/2016 15:10:52        6  37.4  9.25 pada  a     d    \n 2 29/11/2016 15:21:30        6  38.6 13.1  pada  a     d    \n 3 29/11/2016 15:10:52        7  34.4 10.3  pada  a     d    \n 4 29/11/2016 15:11:03        7  34.3  9.81 pata  a     t    \n 5 29/11/2016 15:11:14        7  34.6 11.0  podo  o     d    \n 6 29/11/2016 15:13:39        7  34.3  9.65 pada  a     d    \n 7 29/11/2016 15:16:05        7  34.8 11.5  pada  a     d    \n 8 29/11/2016 15:17:07        7  34.5 10.5  putu  u     t    \n 9 29/11/2016 15:19:45        7  34.3  9.64 putu  u     t    \n10 29/11/2016 15:21:30        7  35.4 13.8  pada  a     d    \n# ℹ 1,229 more rows\n```\n:::\n:::\n\n\n`rec_date` is the date and time of recording. Each observed tongue contour has a unique `rec_date` (this will come in handy later). `fan_line` is the number of the line in the fan coordinate system used by Articulate Assistant Advanced (which I used to record the data). `X` and `Y` are the horizontal and vertical position of each point on the contour. The unit is millimeters. `word`, `vowel` and `c2` are self-explanatory.\n\nLet's start by plotting the smoothed contours by vowel and consonant.\n\n\n::: {.cell hash='index_cache/html/smooth_616f2cd029f4bb805e98a0565515f4f3'}\n\n```{.r .cell-code}\ntongue_data %>%\n  ggplot(aes(X, Y)) +\n  geom_smooth(aes(colour = vowel), method = \"loess\") +\n  coord_fixed() +\n  facet_grid(c2 ~ vowel) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/smooth-1.png){width=672}\n:::\n:::\n\n\nWe can immediately notice that with /u/ there is something odd going on. That does not look like a tongue surface (maybe that of a chameleon! Definitely not one of a 'hooman'.) The smooths for /a/ and /o/ seem quite standard.\n\nTo see what is going on, let's plot now also the individual points as recorded in the data, whith a superimoposed smooth, for comparison.\n\n\n::: {.cell hash='index_cache/html/points_f61266149073f53d10e479ea0de17319'}\n\n```{.r .cell-code}\ntongue_data %>%\n  ggplot(aes(X, Y)) +\n  geom_point(alpha = 0.1) +\n  geom_smooth(aes(colour = vowel), method = \"loess\") +\n  coord_fixed() +\n  facet_grid(c2 ~ vowel) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/points-1.png){width=672}\n:::\n:::\n\n\nWhile the smooths with /a/ and /o/ more or less have a good fit when compared to the points, with /u/ the smooths are really off.\n\nThis happpens because the tongue root (in this particular case) developpes vertically rather than slanted. The smooth isagnostic about the fact that points lying on the same X value but with different Y values belong to different portion of the tongue contour. The result is that smoothing happens across tongue parts.\n\nAn alternative (if you don't like points) is to use `geom_path()` to plot the individual tongue contours as lines. `geom_path()` connects points with a line, following the order in which they appear in the dataset. So, before using this geometry, we need to arrange the dataframe such that the points are in the right order (now they are in the wrong order).\n\nTo do so, we can use `rec_date` (which identifies the individual contours) and `fan_line` which indicates the orders of points (for each contour, there a maximum 42 points/fan lines; NAs have been excluded).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntongue_data <- tongue_data %>%\n  arrange(rec_date, fan_line)\n\ntongue_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,239 × 30\n   speaker seconds rec_date          prompt label TT_displacement_sm TT_velocity\n   <chr>     <dbl> <chr>             <chr>  <chr>              <dbl>       <dbl>\n 1 it01       1.11 29/11/2016 15:10… Dico … max_…               77.4       -7.18\n 2 it01       1.11 29/11/2016 15:10… Dico … max_…               77.4       -7.18\n 3 it01       1.11 29/11/2016 15:10… Dico … max_…               77.4       -7.18\n 4 it01       1.11 29/11/2016 15:10… Dico … max_…               77.4       -7.18\n 5 it01       1.11 29/11/2016 15:10… Dico … max_…               77.4       -7.18\n 6 it01       1.11 29/11/2016 15:10… Dico … max_…               77.4       -7.18\n 7 it01       1.11 29/11/2016 15:10… Dico … max_…               77.4       -7.18\n 8 it01       1.11 29/11/2016 15:10… Dico … max_…               77.4       -7.18\n 9 it01       1.11 29/11/2016 15:10… Dico … max_…               77.4       -7.18\n10 it01       1.11 29/11/2016 15:10… Dico … max_…               77.4       -7.18\n# ℹ 1,229 more rows\n# ℹ 23 more variables: TT_velocity_abs <dbl>, TD_displacement_sm <dbl>,\n#   TD_velocity <dbl>, TD_velocity_abs <dbl>, TR_displacement_sm <dbl>,\n#   TR_velocity <dbl>, TR_velocity_abs <dbl>, fan_line <int>, X <dbl>, Y <dbl>,\n#   word <chr>, language <chr>, sex <chr>, item <int>, ipa <chr>, c1 <chr>,\n#   c1_phonation <chr>, vowel <chr>, anteropost <chr>, height <chr>, c2 <chr>,\n#   c2_phonation <chr>, c2_place <chr>\n```\n:::\n:::\n\n\nWe can now use `geom_path()`. The argument `group = rec_date` ensures that individual lines are plotted (without it, the last point of one contour is connected with the first of the contour following in the dataset).\n\n\n::: {.cell hash='index_cache/html/path_356b4243429a69b1fd917838b9cab171'}\n\n```{.r .cell-code}\ntongue_data %>%\n  ggplot(aes(X, Y)) +\n  geom_path(aes(group = rec_date, colour = vowel), alpha = 0.5) +\n  coord_fixed() +\n  facet_grid(c2 ~ vowel) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/path-1.png){width=672}\n:::\n:::\n\n\nThe tongue root in /u/ is now properly rendered.\n\nBut what fif you want to plot a single contour (possibly with confidence intervals) for each of the 6 panels in the previous figure, rather than all the contours?\n\nAn option is to plot an average contour (litterally, the aveages of X and Y). We can easily do that by grouping the data by `fan_line` and then `summarise()` it. Plotting can then be done with `geom_path()` and `geom_polygon()`. All together, the code looks like this.\n\n\n::: {.cell hash='index_cache/html/mean-path_05d072475d33d918b8bd46608b50db0c'}\n\n```{.r .cell-code}\nxy_mean <- tongue_data %>%\n  group_by(fan_line, vowel, c2) %>%\n  summarise(\n    X_mean = mean(X, na.rm = TRUE),\n    Y_mean = mean(Y, na.rm = TRUE)\n  )\n\nxy_ci <- tongue_data %>%\n  group_by(fan_line, vowel, c2) %>%\n  summarise(\n    X_CI_low = t.test(X)$conf.int[1],\n    X_CI_up = t.test(X)$conf.int[2],\n    Y_CI_low = t.test(Y)$conf.int[1],\n    Y_CI_up = t.test(Y)$conf.int[2]\n  )\n\nci_upper <- xy_ci %>%\n  dplyr::select(-X_CI_low, -Y_CI_low) %>%\n  dplyr::rename(\n    CI_X = X_CI_up,\n    CI_Y = Y_CI_up\n  )\n\nci_lower <- xy_ci %>%\n  dplyr::select(-X_CI_up, -Y_CI_up) %>%\n  dplyr::arrange(dplyr::desc(fan_line)) %>%\n  dplyr::rename(\n    CI_X = X_CI_low,\n    CI_Y = Y_CI_low\n  )\n\nci <- rbind(ci_upper, ci_lower)\n\nggplot(xy_mean, aes(X_mean, Y_mean)) +\n  geom_polygon(data = ci, aes(x = CI_X, y = CI_Y), alpha = 0.2) +\n  geom_path(aes(X_mean, Y_mean, colour = vowel)) +\n  facet_grid(c2 ~ vowel) +\n  coord_fixed() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mean-path-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}