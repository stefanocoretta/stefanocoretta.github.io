{
  "hash": "e9caa696c6840bed31752e2b8db958dc",
  "result": {
    "markdown": "---\ntitle: Plotting prior distributions with ggplot2\nauthor: Stefano Coretta\ndate: '2019-06-17'\n\ncategories:\n  - Methods\n  - Linear models\ntags:\n  - data viz\n  - rstats\n  - tidy data\n  - statistics\nbibliography: /Users/ste/texmf/bibtex/bib/linguistics.bib\ncls: unified-style-sheet-for-linguistics.csl\n---\n\n\n\n\nThe choice of priors is a fundamental step of the Bayesian inference process. @vasishth2018 recommend plotting the chosen priors to see if they are reasonable.\n\nIn this post I will show how to easily plot prior distributions in [ggplot2](https://ggplot2.tidyverse.org) (which is part of the [tidyverse](https://www.tidyverse.org)).\n\nLet's load the tidyverse first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntheme_set(theme_minimal()) # I just like this theme :)\n```\n:::\n\n\n## Plotting your priors\n\nLet's start with a simple normal prior with $\\mu$ = 0 and *sd* = 1.\n\nThe plot is initialised with an empty call to `ggplot()`.\nAs aesthetics, you only need to specify the range of *x* values in `aes()`.\nHere, we use `c(-4, 4)`, meaning that the *x*-axis of this plot will have these limits.\nFor a normal distribution, it is useful to set the limits as the mean Â± 4 times the standard deviation (this ensures all the distribution is shown).\n\nThe function `ggplot2::stat_function()` allows us to specify a distribution family with the `fun` argument.\nThis arguments takes the density function (the R functions of the form *dxxx*) of the chosen distribution family, so for the normal (Gaussian) distribution we use `dnorm()`.\nThe argument `n` specifies the number of points along which to calculate the distribution (here `101`), while `args` takes a list with the parameters of the distribution (here the mean `0` and standard deviation `1`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = tibble(x = -4:4), aes(x)) +\n  stat_function(fun = dnorm, n = 101, args = list(1)) +\n  labs(title = \"Normal (Gaussian) distribution\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/normal-1.png){width=672}\n:::\n:::\n\n\nA beta prior will be bounded between 0 and 1, so we can specify that in `aes()`.\nThe beta distribution has two arguments, `shape1` and `shape2` (here `2` and `5`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = tibble(x = 0:1), aes(x)) +\n  stat_function(fun = dbeta, n = 101, args = list(2, 5)) +\n  labs(title = \"Beta distribution\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/beta-1.png){width=672}\n:::\n:::\n\n\nAnother common distribution is the Cauchy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = tibble(x = -10:10), aes(x)) +\n  stat_function(fun = dcauchy, n = 201, args = list(-2, 1)) +\n  labs(title = \"Cauchy distribution\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/cauchy-1.png){width=672}\n:::\n:::\n\n\nThe Poisson distribution can be plotted by changing the type of `geom` and using an `n` that creates only integers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the range 0:20 includes 21 integers, so n = 21\nggplot(data = tibble(x = 0:20), aes(x)) +\n  stat_function(fun = dpois, n = 21, args = list(4), geom = \"point\") +\n  labs(title = \"Poisson distribution\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/poisson-1.png){width=672}\n:::\n:::\n\n\nOf course any family with a corresponding *dxxx* function can be plotted (see `?Distributions` and package-provided families).\n\n## References\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}