{
  "hash": "262c7a1b7f7e87dd19b53ff259e793ef",
  "result": {
    "markdown": "---\ntitle: Factors, coding and contrasts\nauthor: Stefano Coretta\ndate: '2021-07-20'\n\ncategories:\n  - Methods\n  - Linear models\ntags:\n  - statistics\n  - rstats\n\ncover:\n  image: \"/img/twitter-card-contrasts.png\"\n  alt: \"From factors to numbers: coding schemes\"\n  relative: false\n---\n\n\n\n\nThis post is an overview of how factors (i.e. categorical variables) are coded under the hood and which types of coding can be set in R.^[A previous version of this post is also featured as a vignette in the learnB4SS package, <https://learnb4ss.github.io/learnB4SS/articles/contrasts.html>]\n\n# Introduction\n\nThere's seems to be a bit of terminological mix-up in the wild, so we first present a terminological set that will be used throughout the vignette.\n\nCategorical variables in R are generally stored using factors.\nA **factor** is a vector of values from a categorical variable.\nThe possible values in a factor are called **levels** in R.\n\nFor each observation in the factor, the vector specifies the level of that observation.\n\nFor example, let's assume we have a data set with information on dinosaurs and one column specifies the dinosaur's diet: `carnivore`, `herbivore`, `omnivore`.\n\nIn R, this column can be coded as a factor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor(c(\"carnivore\", \"carnivore\", \"herbivore\", \"omnivore\", \"herbivore\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] carnivore carnivore herbivore omnivore  herbivore\nLevels: carnivore herbivore omnivore\n```\n:::\n:::\n\n\nWe are so accustomed to using factors in regression models that sometimes we forget that regressions only work with numbers and cannot work with categorical variables.\n\nTo fit a regression model with categorical variables, these are first converted to numbers.\nThe process of conversion is called **coding**.\n\nOne type of coding is the **dummy variable coding** or simply **dummy coding**.\nThis consists of assigning `0`s or `1`s to the levels in the variable.\n\nLet's go through a simple example of dummy coding of a categorical variable with only 2 levels: `metropolitan` and `rural`.\n\nThe most simple way of coding this categorical variable as a number is to assign `0` to one level and `1` to the other level. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor(c(\"rural\", \"rural\", \"metropolitan\", \"rural\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] rural        rural        metropolitan rural       \nLevels: metropolitan rural\n```\n:::\n\n```{.r .cell-code}\n# dummy coded\nc(0, 0, 1, 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 1 0\n```\n:::\n:::\n\n\nIn R, dummy coding is done under the hood for you when using factors, so you don't have to worry about the conversion.\n\nWhen the categorical variable has 3 levels instead of 2, we need a work-around in order to code the 3-level factor with only `0`s and `1`s (we can't use higher numbers for reasons we will see later).\n\nWith three levels, we can code the variable using two numeric variables (instead of just one).\nGoing back to the dinosaur's diet example, we can use:\n\n- One variable that codes whether the dinosaur is a carnivore `0` or a herbivore `1`.\n- One variable that codes whether the dinosaur is a carnivore `0` or an omnivore `1`.\n\nLet call the first variable `dummy_1` and the second variable `dummy_2`. Then:\n\n- When `dummy_1` is `0` and `dummy_2` is also `0`, the dinosaur is a carnivore.\n- When `dummy_1` is `1` and `dummy_2` is `0`, the dinosaur is a herbivore.\n- When `dummy_1` is `0` and `dummy_2` is `1`, the dinosaur is an omnivore.\n\nSo the following factor (repeated from above):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor(c(\"carnivore\", \"carnivore\", \"herbivore\", \"omnivore\", \"herbivore\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] carnivore carnivore herbivore omnivore  herbivore\nLevels: carnivore herbivore omnivore\n```\n:::\n:::\n\n\ncan be coded as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndummy_1 <- c(0, 0, 1, 0, 1)     # carnivore (0) or herbivore (1)?\ndummy_2 <- c(0, 0, 0, 1, 0)     # carnivore (0) or omnivore (1)?\n\nlibrary(tidyverse)\n\ntibble(\n  dummy_1, dummy_2\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  dummy_1 dummy_2\n    <dbl>   <dbl>\n1       0       0\n2       0       0\n3       1       0\n4       0       1\n5       1       0\n```\n:::\n:::\n\n\nIf this doesn't make much sense, try and figure it out by checking the value of the two columns for each row with the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# case_when() is a very helpful function from dplyr!\n\ncase_when(\n  dummy_1 == 0 & dummy_2 == 0 ~ \"carnivore\",\n  dummy_1 == 1 & dummy_2 == 0 ~ \"herbivore\",\n  dummy_1 == 0 & dummy_2 == 1 ~ \"omnivore\",\n)\n```\n:::\n\n\nWhat if the factor has 4 levels? Then you can code it with 3 dummy variables. And what about 5 levels? Use 4 dummy variables. The number of dummy variables needed is equal to the number of levels minus 1 ($n_{dummy} = n_{levels} - 1$).\n\n## Summing up\n\nTo sum up:\n\n- **Factors** are vectors that code categorical variables.\n- The values in a factor are called **levels**.\n- Regression models cannot work directly with factors, so these are coded using numbers.\n- **Dummy coding** is one way of coding factors as numbers using one or more numeric variables of `0`s and `1`s.\n\n# Coding and contrasts\n\nNow. We've seen that dummy coding is simply using dummy numeric variables with `0`s and `1`s.\n\nIn fact, this is **one way** of coding factors, or one coding scheme.^[You can learn about more coding schemes here: <https://stats.idre.ucla.edu/spss/webbooks/reg/chapter5/regression-with-spsschapter-5-additional-coding-systems-for-categorical-variables-in-regressionanalysis/>.]\nDifferent coding schemes in R are called **contrasts**.\nDummy coding is called **treatment contrasts** in R.\n\n## Treatment contrasts\n\nThe term **treatment contrasts** comes from the clinical sciences where you test, for example, the efficacy of a medical intervention (a drug, surgery, etc...) by comparing a **control group** (which has not received the \"treatment\") with a group that has received the medical intervention (the **treatment group**).\n\nThe control group can be used as the reference group to see if the treatment group has benefited from the medical treatment (i.e. if the treatment group's health has improved after the intervention relative to the control group, then one can infer that the treatment was effective).\n\nLet's look at treatment contrasts in R.\n\nIn the previous section, we've been illustrating dummy coding by assigning `0`s and `1`s using one or more dummy variables.\nIn practice, you do not need to do that to run real analyses, because R does that under the hood for you.\n\nFactors in R are coded with treatment contrasts by default.\nAlso by default, the first level is set as the reference level (the order is alphabetical by default).\nThe reference level is the level that gets coded only with `0`s, as we have seen above for the dinosaur's diet factor (`carnivorous` had `dummy_1 = 0` and `dummy_2 = 0`).\n\nLet's see an example using a data table with measurements of vowel duration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"./data/vowels.rda\")\nglimpse(vowels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 886\nColumns: 9\n$ item          <dbl> 20, 2, 11, 1, 15, 10, 13, 3, 14, 19, 4, 6, 16, 17, 5, 23…\n$ speaker       <chr> \"it01\", \"it01\", \"it01\", \"it01\", \"it01\", \"it01\", \"it01\", …\n$ word          <chr> \"pugu\", \"pada\", \"poco\", \"pata\", \"boco\", \"podo\", \"boto\", …\n$ v1_duration   <dbl> 95.23720, 138.96844, 126.93226, 127.49888, 132.33310, 12…\n$ c2_voicing    <chr> \"voiced\", \"voiced\", \"voiceless\", \"voiceless\", \"voiceless…\n$ vowel         <chr> \"u\", \"a\", \"o\", \"a\", \"o\", \"o\", \"o\", \"a\", \"o\", \"u\", \"a\", \"…\n$ c2_place      <chr> \"velar\", \"coronal\", \"velar\", \"coronal\", \"velar\", \"corona…\n$ speech_rate   <dbl> 4.893206, 5.015636, 4.819541, 5.031662, 5.063435, 5.0632…\n$ speech_rate_c <dbl> -0.55937531, -0.43694485, -0.63303978, -0.42091937, -0.3…\n```\n:::\n:::\n\n\nFor example, let's take the `vowel` column.\nThis column indicates which vowel the measurement was taken from, and that can be /a/, /o/, or /u/.\n\nIf we convert the `vowel` column into a factor, the levels will be `a`, `o` and `u`, and `a` will be the reference level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvowels <- vowels %>%\n  mutate(vowel = as.factor(vowel))\n\nlevels(vowels$vowel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"o\" \"u\"\n```\n:::\n:::\n\n\nTo get a sense of how a factor would be coded with treatment contrasts, we can print a dummy coding table with the `contr.treatment()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontr.treatment(levels(vowels$vowel))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  o u\na 0 0\no 1 0\nu 0 1\n```\n:::\n:::\n\n\nNow, let's run a regression model with `v1_duration` as the outcome variable and `vowel` as the predictor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvow_lm <- lm(v1_duration ~ vowel, data = vowels)\n\nsummary(vow_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = v1_duration ~ vowel, data = vowels)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-66.874 -22.567  -2.293  17.025 106.755 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  128.616      1.806  71.227   <2e-16 ***\nvowelo        -5.641      2.549  -2.213   0.0272 *  \nvowelu       -29.763      2.603 -11.432   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 31.38 on 883 degrees of freedom\nMultiple R-squared:  0.1419,\tAdjusted R-squared:  0.1399 \nF-statistic: 72.99 on 2 and 883 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\nThe summary returns three coefficients:\n\n- `Intercept`.\n- `vowelo`.\n- `vowelu`.\n\nSince `a` is the reference level of `vowel`, the `Intercept` corresponds to the mean duration of the vowel `a`, i.e. 128 ms.\n\nThe coefficient of `o` is the **difference between the mean duration of `o` and the mean duration of the reference level `a`** (i.e. the `Intercept`).\nSo `o` is 5.6 ms shorter than `a` on average (shorter because the coefficient is negative).\n\nFinally, the coefficient of `u` is the **difference between the mean duration of `u` and the mean duration of the reference level `a`**\nSo `u` is 29.7 ms shorter than `a`.\n\nThis is how treatment contrasts work.\n\n## Sum contrasts\n\nAnother type of coding is **effect coding**.\nIn R, the corresponding contrast type are the so-called **sum contrasts**.\n\nWhen using sum contrasts, the levels in a factor are coded using `1`s, `-1`s and `0`s.\nIf you sum the values of each dummy variable you always get `0` (hence the name \"sum\" contrast).\n\nLet's see what happens to the factor `vowel` when using sum contrasts (remember that factors use treatment contrasts by default).\n\nThis is how sum coding would look like for this factor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontr.sum(levels(vowels$vowel))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [,1] [,2]\na    1    0\no    0    1\nu   -1   -1\n```\n:::\n:::\n\n\nSince there are 3 levels, we need two dummy variables.\nSo `a` is coded as `1, 0`, `o` is coded as `0, 1`, and `u` as `-1, -1`.\n\nTo set the contrasts of a factor to sum coding, we can run the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontrasts(vowels$vowel) <- \"contr.sum\"\n# If you want to change it back to treatment contrasts you can run\n# contrasts(vowels$vowel) <- \"contr.treatment\"\n```\n:::\n\n\nWith sum contrasts the reference level is in fact the grand mean.\n\nIn our model of vowel duration this means that the `Intercept` coefficient will be the grand mean of vowel duration.\n\nLet's rerun the model and look at the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvow_lm <- lm(v1_duration ~ vowel, data = vowels)\n\nsummary(vow_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = v1_duration ~ vowel, data = vowels)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-66.874 -22.567  -2.293  17.025 106.755 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  116.815      1.055 110.728  < 2e-16 ***\nvowel1        11.801      1.483   7.957 5.40e-15 ***\nvowel2         6.160      1.481   4.160 3.49e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 31.38 on 883 degrees of freedom\nMultiple R-squared:  0.1419,\tAdjusted R-squared:  0.1399 \nF-statistic: 72.99 on 2 and 883 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\nThe `Intercept` now is 116 ms, which mean that the mean of vowel duration across the three vowels is 116 ms.\n\nWe can check this by taking the mean:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(vowels$v1_duration)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 117.2747\n```\n:::\n:::\n\n\nYup, pretty close (small differences are fine).\n\nSo what are now the coefficients called `vowel1` and `vowel2`?\n\nThese are, respectively, the difference between the mean duration of `a` and the grand mean, and the difference between the mean duration of `o` and the grand mean.\n\nSo `a` is 11.8 ms longer than the grand mean, and `o` is 6.1 ms longer than the grand mean.\n\nWhat about `u` then?\n\nEasy.\nYou just subtract the coefficients of both `a` and `o` from the grand mean: $116.8 - 11.8 - 6.1 = 98.9$.\n\nIf you want to check that this is correct, the mean duration of `u` according to the model above where we used treatment contrasts was $128.616 - 29.763 = 98.853$.\n\n## Sum contrasts and interactions\n\nSum contrasts can be very handy when the model contains interactions between factors.\n\nLet's say we want to include in our model of vowel duration a predictor that specifies the voicing of the stop following the vowel.\nWe also add an interaction between vowel and voicing, so that we can model differences in the effect of voicing across vowels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvow_lm_2 <- lm(v1_duration ~ c2_voicing + vowel + c2_voicing:vowel, data = vowels)\n\nsummary(vow_lm_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = v1_duration ~ c2_voicing + vowel + c2_voicing:vowel, \n    data = vowels)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-64.905 -23.262  -2.033  18.134 115.813 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                 123.469      1.449  85.232  < 2e-16 ***\nc2_voicingvoiceless         -13.309      2.049  -6.496 1.37e-10 ***\nvowel1                       14.606      2.037   7.171 1.57e-12 ***\nvowel2                        8.564      2.033   4.212 2.79e-05 ***\nc2_voicingvoiceless:vowel1   -5.609      2.880  -1.947   0.0518 .  \nc2_voicingvoiceless:vowel2   -4.808      2.876  -1.672   0.0949 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 30.47 on 880 degrees of freedom\nMultiple R-squared:  0.1937,\tAdjusted R-squared:  0.1891 \nF-statistic: 42.29 on 5 and 880 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\nNow the `Intercept` is the mean vowel duration when the following stop is voiced (the reference level of `c2_voicing`).\nThis means that the average vowel followed by a voiced stop is 123 ms long in our data.\n\nThe coefficient of `c2_voicingvoiceless` tells us the mean effect of `c2_voicing` on vowel duration, averaged across all vowels.\nSo, on average, a vowel is about 13 ms shorter when followed by a voiceless stop.\n\nThe coefficients of `vowel1` and `vowel2` indicate the difference between the average vowel duration before a voiced stop (the `Intercept`) and `a` and `o` respectively.\nAs before, to get the difference between the average vowel duration of `u` before a voiceless stop and the mean vowel duration, you just need to subtract the coefficients of `vowel1` and `vowel2` from the `Intercept`: $123.5 - 14.6 - 8.5 = 100.4$.\n\nThe last two coefficients, `c2_voicingvoiceless:vowel1` and `c2_voicingvoiceless:vowel2` correspond to the difference in the effect of voicing between the average effect of voicing (`c2_voicingvoiceless`, i.e. -13 ms) and the effect of voicing in `a` and `o` respectively.\nThat is, the decrease of vowel duration for `a` is 5.6 ms greater than the average effect, while the decrease of vowel duration for `o` is 4.8 ms greater than the average effect.\n\nFollowing the usual formula, the effect of voicing for `u` is $-13.309 - (-5.6) - (-4.8) = -2.9$.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}