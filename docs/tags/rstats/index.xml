<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rstats on Stefano Coretta</title>
    <link>https://stefanocoretta.github.io/tags/rstats/</link>
    <description>Recent content in rstats on Stefano Coretta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 01 Dec 2021 17:38:53 +0000</lastBuildDate><atom:link href="https://stefanocoretta.github.io/tags/rstats/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to simplify your study design</title>
      <link>https://stefanocoretta.github.io/post/2021-12-01-how-to-simplify-your-study-design/</link>
      <pubDate>Wed, 01 Dec 2021 17:38:53 +0000</pubDate>
      
      <guid>https://stefanocoretta.github.io/post/2021-12-01-how-to-simplify-your-study-design/</guid>
      <description>Content Warning: there are A LOT of gifs in this post
We have all been there.
We have run a study with a thoroughly thought-out research design. We got participants from the selected target population. Each participant has gone through the tasks of the study, to gather data from several crossing conditions and now the time has come for you to run (the analysis) FOR. YOUR. LIFE.
And then THE HORROR.</description>
    </item>
    
    <item>
      <title>R gist — Dot matrix charts with ggplot2</title>
      <link>https://stefanocoretta.github.io/post/2021-11-21-dot-matrix-charts/</link>
      <pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://stefanocoretta.github.io/post/2021-11-21-dot-matrix-charts/</guid>
      <description>Set up knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE) knitr::opts_knit$set(root.dir = here::here()) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────────── tidyverse 1.3.1 ── ## ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ## ✔ tibble 3.1.6 ✔ dplyr 1.0.8 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.0 ## ✔ readr 2.1.2 ✔ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() Create data dots &amp;lt;- tibble( group = as.</description>
    </item>
    
    <item>
      <title>Factors, coding and contrasts</title>
      <link>https://stefanocoretta.github.io/post/contrasts/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://stefanocoretta.github.io/post/contrasts/</guid>
      <description>This post is an overview of how factors (i.e. categorical variables) are coded under the hood and which types of coding can be set in R.1
Introduction There’s seems to be a bit of terminological mix-up in the wild, so we first present a terminological set that will be used throughout the vignette.
Categorical variables in R are generally stored using factors. A factor is a vector of values from a categorical variable.</description>
    </item>
    
    <item>
      <title>R gist — Plotting the area under the curve with ggplot</title>
      <link>https://stefanocoretta.github.io/post/plotting-the-area-under-the-curve/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://stefanocoretta.github.io/post/plotting-the-area-under-the-curve/</guid>
      <description>knitr::opts_chunk$set(echo = TRUE) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────────── tidyverse 1.3.1 ── ## ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ## ✔ tibble 3.1.6 ✔ dplyr 1.0.8 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.0 ## ✔ readr 2.1.2 ✔ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(ggthemr) ggthemr(&amp;quot;earth&amp;quot;) x &amp;lt;- 1:11 y &amp;lt;- (1.5:11.5)^2 low &amp;lt;- (0:10)^2 upp &amp;lt;- (3:13)^2 ggplot() + aes(x, y) + geom_line() + geom_ribbon(aes(ymin = low, ymax = upp), alpha = 0.</description>
    </item>
    
    <item>
      <title>On random effects</title>
      <link>https://stefanocoretta.github.io/post/2021-03-15-on-random-effects/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://stefanocoretta.github.io/post/2021-03-15-on-random-effects/</guid>
      <description>If you use mixed-effects models (aka multilevel models, hierarchical models), I am sure that at some point you asked yourself the following question at least once: Should I include variable X as a fixed or as a random effect?
To answer this question we need to ask first: what is a random effect?
Regrettably, there is no straightforward answer (disappointed, uh?).
The main reason is that, in fact, there are many possible (and most times mutually exclusive) definitions of what a random (vs fixed) effect is.</description>
    </item>
    
    <item>
      <title>R gist — Plot an interactive 3D RGB colour space</title>
      <link>https://stefanocoretta.github.io/post/rgb-space/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://stefanocoretta.github.io/post/rgb-space/</guid>
      <description> library(plotly) codes &amp;lt;- seq(0, 255, 25.5) rgb &amp;lt;- expand.grid( r = codes, g = codes, b = codes ) %&amp;gt;% mutate(colour = rgb(r, g, b, maxColorValue = 255)) rgb %&amp;gt;% plot_ly(x = ~r, y = ~g, z = ~b, marker = list(color = ~colour, size = 6)) </description>
    </item>
    
    <item>
      <title>Plotting prior distributions with ggplot2</title>
      <link>https://stefanocoretta.github.io/post/priors-ggplot2/</link>
      <pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://stefanocoretta.github.io/post/priors-ggplot2/</guid>
      <description>The choice of priors is a fundamental step of the Bayesian inference process. Vasishth et al. (2018) recommend plotting the chosen priors to see if they are reasonable.
In this post I will show how to easily plot prior distributions in ggplot2 (which is part of the tidyverse).
Let’s load the tidyverse first.
library(tidyverse) ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────────── tidyverse 1.3.1 ── ## ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ## ✔ tibble 3.</description>
    </item>
    
    <item>
      <title>Plotting tongue contours with ggplot2</title>
      <link>https://stefanocoretta.github.io/post/tongue-ggplot2/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://stefanocoretta.github.io/post/tongue-ggplot2/</guid>
      <description>When plotting tongue contours data obtained from ultrasound tongue imaging in R using ggplot2, a common option to smooth over the individual contours and show the general pattern is to use geom_smooth(methood = &#34;loess&#34;). However, as I will show in this post, in certain cases this method leads to very disorted contours. Such distortion is more or less always present, although at a lower degree in less extreme cases.</description>
    </item>
    
    <item>
      <title>Vowel formants trajectories and tidy data</title>
      <link>https://stefanocoretta.github.io/post/formants-tidy/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://stefanocoretta.github.io/post/formants-tidy/</guid>
      <description>With the advent of more powerful statistical methods for assessing time series data, it is now becoming more common to compare whole vowel formant trajectories rather then just using average values.
In this post I will show how to tidy a formant measurements dataset and plot formants using the tidyverse (Wickham 2017).
From wide to long To illustrate the process, I will use formant data that was kindly provided by Stephen Nichols.</description>
    </item>
    
  </channel>
</rss>
