<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data processing | Stefano Coretta</title>
    <link>https://stefanocoretta.github.io/tags/data-processing/</link>
      <atom:link href="https://stefanocoretta.github.io/tags/data-processing/index.xml" rel="self" type="application/rss+xml" />
    <description>data processing</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-uk</language><copyright>© 2017-2020 Stefano Coretta</copyright><lastBuildDate>Thu, 21 Mar 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>data processing</title>
      <link>https://stefanocoretta.github.io/tags/data-processing/</link>
    </image>
    
    <item>
      <title>Literate programming with Praat</title>
      <link>https://stefanocoretta.github.io/post/literate-programming-with-praat/</link>
      <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://stefanocoretta.github.io/post/literate-programming-with-praat/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://stefanocoretta.github.io/img/praat-literate.png&#34; alt=&#34;Literate Praat example&#34;&gt;&lt;/p&gt;
&lt;p&gt;This post quickly illustrates how to apply a literate programming workflow to Praat scripting.
To be able to reproduce the steps described here you need the latest version of &lt;a href=&#34;https://pandoc.org&#34;&gt;pandoc&lt;/a&gt; and the &lt;a href=&#34;https://github.com/driusan/lmt&#34;&gt;Literate Markdown Tangler&lt;/a&gt; (&lt;code&gt;lmt&lt;/code&gt;, you will need to install &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; first to install &lt;code&gt;lmt&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&#34;what-is-literate-programming&#34;&gt;What is literate programming?&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;https://en.wikipedia.org/wiki/Literate_programming&#34;&gt;literate programming&lt;/a&gt;, one writes both code and plain text which explains what the code does in a single document.
Natural language and programming language are interleaved in the document in a way that is reader-oriented, rather than software oriented.
So, for example, the code can be included in an order that is different from the order it should have had the document been a script.&lt;/p&gt;
&lt;p&gt;This programming paradigm allows developers to focus on documenting their code in a more natural way.
This has the double advantage of aiding a new user in understanding what the code does and helping the author of the code to develop the code following a logic that can be different from the logic of the code&amp;rsquo;s programming language.&lt;/p&gt;
&lt;p&gt;In general, from a literate source file (a file containing both natural language and programming code) it is possible to obtain a documentation file (by the process called &lt;em&gt;weaving&lt;/em&gt;) and a script file (by the process called &lt;em&gt;tangling&lt;/em&gt;) which is interpretable by the target programming language.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.markdownguide.org&#34;&gt;Markdown&lt;/a&gt;, a simple but effective mark-up language, allows mixing natural language (with rich formatting) and code in a single document.
&lt;a href=&#34;https://pandoc.org&#34;&gt;Pandoc&lt;/a&gt; is a software utility which can convert documents from and to a variety of formats.
The conversion relevant to us is from Markdown to PDF.
Converting Markdown to PDF corresponds to the weaving process mentioned above, i.e. creating a richly formatted documentation of the code.
Pandoc has syntax highlighting capabilities, and Praat syntax is supported, so that your documentation will also be easier to interpret.
The &lt;code&gt;Literate Markdown Tangler&lt;/code&gt;, by Dave MacFarlane, is a software written in &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; that instead can be used to tangle (extract) the code from the source file into a scripting file.&lt;/p&gt;
&lt;p&gt;Pandoc and &lt;code&gt;lmt&lt;/code&gt; can be used together to develop a literate programming workflow with Praat scripting.
This means that you can develop a Praat script by laying out the pieces of the script in the source file and explain what the various parts of the script do in using natural language.
&lt;code&gt;lmt&lt;/code&gt; further allows the user to create &amp;ldquo;blocks&amp;rdquo; of code that can be referenced in other blocks and reused.
If you wanna generate a PDF version of the documentation, you can convert the source file to a PDF with Pandoc.&lt;/p&gt;
&lt;p&gt;The figure at the top of this post shows an example of a literate Praat source file.&lt;/p&gt;
&lt;p&gt;The following sections will point you to the software and files that need to be installed/copied and will show how to use literate programming with Praat scripting.&lt;/p&gt;
&lt;h2 id=&#34;necessary-software&#34;&gt;Necessary software&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You need to install the latest version of Pandoc, which can be found &lt;a href=&#34;https://pandoc.org/installing.html&#34;&gt;here&lt;/a&gt;. After installing, be sure you can run this command from your command line GUI: &lt;code&gt;pandoc --version&lt;/code&gt;. If a version is returned, Pandoc is working on your system.&lt;/li&gt;
&lt;li&gt;Install Go from &lt;a href=&#34;https://golang.org&#34;&gt;here&lt;/a&gt; and set it up, then download and install &lt;code&gt;lmt&lt;/code&gt; from &lt;a href=&#34;https://github.com/driusan/lmt&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Download and unzip the content of &lt;a href=&#34;https://stefanocoretta.github.io/files/pandoc-praat.zip&#34;&gt;this zip&lt;/a&gt; to a convenient directory (usually, in &lt;code&gt;.pandoc/&lt;/code&gt; in your user folder). This folder contains the files which allow Pandoc to highlight Praat syntax.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;literate-praat&#34;&gt;Literate Praat&lt;/h2&gt;
&lt;p&gt;To generate the Praat script and its documentation, you have to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write your script in a Markdown source file with Praat code enclosed in code chunks that follow the format required by &lt;code&gt;lmt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;lmt&lt;/code&gt; to tangle the code from the source file into a standalone Praat script.&lt;/li&gt;
&lt;li&gt;Use pandoc with a custom syntax highlighter to generate the documentation of the script.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-source-file&#34;&gt;The source file&lt;/h3&gt;
&lt;p&gt;The source file will contain text, Markdown markup, and code enclosed between back-ticks.
The following is an example of how such file would look like.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://stefanocoretta.github.io/img/basic.png&#34; alt=&#34;Literate Praat basic example&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;tangle-the-code&#34;&gt;Tangle the code&lt;/h3&gt;
&lt;p&gt;To tangle the code into a standalone Praat script, run the following line from your command line GUI, where &lt;code&gt;my-script.praat.md&lt;/code&gt; is your Praat source file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lmt my-script.praat.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The scripts defined in the source file will be output in the same directory as the source file (to learn more on how this works, check the &lt;code&gt;lmt&lt;/code&gt; README on GitHub).&lt;/p&gt;
&lt;h3 id=&#34;weave-the-documentation&#34;&gt;Weave the documentation&lt;/h3&gt;
&lt;p&gt;To weave the documentation, run the following by replacing the syntax definition path with the path to the &lt;code&gt;pandoc-praat/&lt;/code&gt; folder on your computer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pandoc -f gfm -o doc.pdf script.praat.md -N --syntax-definition=&amp;lt;your-path-here&amp;gt;/pandoc-praat/praat.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This line of code tells Pandoc to convert from Markdown to PDF and where to find the files for highlighting Praat code.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;.pdf&lt;/code&gt; file named &lt;code&gt;doc.pdf&lt;/code&gt; containing the documentation of the script will be created when the line is run.&lt;/p&gt;
&lt;h2 id=&#34;syntax-highlighting-in-your-editor&#34;&gt;Syntax highlighting in your editor&lt;/h2&gt;
&lt;p&gt;If you are after an editor that has syntax highlighting for Praat, I suggest you to try out (Atom)[https://atom.io] and the package &lt;a href=&#34;https://atom.io/packages/language-praat&#34;&gt;language-praat&lt;/a&gt; (disclaimer, I am the author of the package 😉).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vowel formants trajectories and tidy data</title>
      <link>https://stefanocoretta.github.io/post/vowel-formants-trajectories-and-tidy-data/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://stefanocoretta.github.io/post/vowel-formants-trajectories-and-tidy-data/</guid>
      <description>


&lt;p&gt;With the advent of more powerful statistical methods for accessing time series data, it is now more common to compare whole vowel formant trajectories rather then just using average formant values.&lt;/p&gt;
&lt;p&gt;Sometimes, the output of the Praat script used for extracting formats data gives us a ‘wide format’ dataset.
In this format, separate columns contain formant values for each interval within the vowel.
Normally, values are extracted every 10% or 5% intervals within the vowel.&lt;/p&gt;
&lt;p&gt;To work with formant trajectories data in &lt;code&gt;R&lt;/code&gt;, we need instead a ‘long format’ dataset.
In a long format dataset, the percent intervals are layed out in rows, rather then columns.&lt;/p&gt;
&lt;p&gt;We start by reading in the formant data, which were kindly provided by &lt;a href=&#34;http://tiny.cc/sjn&#34;&gt;Stephen Nichols&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories &amp;lt;- read_csv(&amp;quot;./static/data/nichols-2018/tulemupepelako.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   .default = col_double(),
##   Vowel = col_character(),
##   Word = col_character()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## See spec(...) for full column specifications.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 61
##    Time Vowel Word  Duration F1_05 F1_10 F1_15 F1_20 F1_25 F1_30 F1_35 F1_40
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1  194. u     tule…     43.3  406.  439.  453.  456.  430.  357.  314.  288.
## 2  194. e     tule…    103.   503.  517.  537.  564.  556.  362.  315.  295.
## 3  194. u     tule…     14.1  290.  288.  286.  283.  281.  281.  282.  295.
## 4  194. e     tule…     75.7  440.  441.  439.  429.  386.  269.  250.  318.
## 5  194. e     tule…     68.2  437.  445.  479.  562.  622.  605.  523.  618.
## 6  195. a     tule…     89.8  800.  736.  662.  543.  447.  564.  768.  358.
## 7  195. o     tule…     98.5  482.  463.  471.  326.  316.  573. 1511. 1389.
## # … with 49 more variables: F1_45 &amp;lt;dbl&amp;gt;, F1_50 &amp;lt;dbl&amp;gt;, F1_55 &amp;lt;dbl&amp;gt;, F1_60 &amp;lt;dbl&amp;gt;,
## #   F1_65 &amp;lt;dbl&amp;gt;, F1_70 &amp;lt;dbl&amp;gt;, F1_75 &amp;lt;dbl&amp;gt;, F1_80 &amp;lt;dbl&amp;gt;, F1_85 &amp;lt;dbl&amp;gt;,
## #   F1_90 &amp;lt;dbl&amp;gt;, F1_95 &amp;lt;dbl&amp;gt;, F2_05 &amp;lt;dbl&amp;gt;, F2_10 &amp;lt;dbl&amp;gt;, F2_15 &amp;lt;dbl&amp;gt;,
## #   F2_20 &amp;lt;dbl&amp;gt;, F2_25 &amp;lt;dbl&amp;gt;, F2_30 &amp;lt;dbl&amp;gt;, F2_35 &amp;lt;dbl&amp;gt;, F2_40 &amp;lt;dbl&amp;gt;,
## #   F2_45 &amp;lt;dbl&amp;gt;, F2_50 &amp;lt;dbl&amp;gt;, F2_55 &amp;lt;dbl&amp;gt;, F2_60 &amp;lt;dbl&amp;gt;, F2_65 &amp;lt;dbl&amp;gt;,
## #   F2_70 &amp;lt;dbl&amp;gt;, F2_75 &amp;lt;dbl&amp;gt;, F2_80 &amp;lt;dbl&amp;gt;, F2_85 &amp;lt;dbl&amp;gt;, F2_90 &amp;lt;dbl&amp;gt;,
## #   F2_95 &amp;lt;dbl&amp;gt;, F3_05 &amp;lt;dbl&amp;gt;, F3_10 &amp;lt;dbl&amp;gt;, F3_15 &amp;lt;dbl&amp;gt;, F3_20 &amp;lt;dbl&amp;gt;,
## #   F3_25 &amp;lt;dbl&amp;gt;, F3_30 &amp;lt;dbl&amp;gt;, F3_35 &amp;lt;dbl&amp;gt;, F3_40 &amp;lt;dbl&amp;gt;, F3_45 &amp;lt;dbl&amp;gt;,
## #   F3_50 &amp;lt;dbl&amp;gt;, F3_55 &amp;lt;dbl&amp;gt;, F3_60 &amp;lt;dbl&amp;gt;, F3_65 &amp;lt;dbl&amp;gt;, F3_70 &amp;lt;dbl&amp;gt;,
## #   F3_75 &amp;lt;dbl&amp;gt;, F3_80 &amp;lt;dbl&amp;gt;, F3_85 &amp;lt;dbl&amp;gt;, F3_90 &amp;lt;dbl&amp;gt;, F3_95 &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dataset contains formant values of F1-F3 at 5% intervals for the vowels of the word &lt;em&gt;tulemupepelako&lt;/em&gt; ‘we are praying for her’ (Bemba, [&lt;code&gt;bemb1257&lt;/code&gt;]).
It’s a toy dataset of course, just for purpose of illustration, so not very exciting!&lt;/p&gt;
&lt;p&gt;The values for each 5% interval for each formant are in separate columns.
For plotting and modelling, though, we need the data to be in a ‘tidy’ format &lt;span class=&#34;citation&#34;&gt;(Wickham 2014)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each observation unit is in a separate row&lt;/li&gt;
&lt;li&gt;each variable is a separate column&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our case, each observation unit is a 5% interval.
As for the variables, they are: time in the recording, word, vowel, vowel duration, F1, F2, and F3.&lt;/p&gt;
&lt;p&gt;The first step towards a long format data set is to gather all the columns that have formant values to a column indicating the formant plus interval (like ‘F1_05’) and the value of that formant in that interval.
We can use &lt;code&gt;gather()&lt;/code&gt; for this.&lt;/p&gt;
&lt;p&gt;In the following chunks, I will illustrate the results of each step separately by saving the output of the functions to variables.
Later in this post, you’ll find a pipe chain with all functions without intermediate outputs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories_gath &amp;lt;- gather(trajectories, &amp;quot;formant&amp;quot;, &amp;quot;value&amp;quot;, F1_05:F3_95)
trajectories_gath&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 399 x 6
##     Time Vowel Word           Duration formant value
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt;
##  1  194. u     tulemupepelako     43.3 F1_05    406.
##  2  194. e     tulemupepelako    103.  F1_05    503.
##  3  194. u     tulemupepelako     14.1 F1_05    290.
##  4  194. e     tulemupepelako     75.7 F1_05    440.
##  5  194. e     tulemupepelako     68.2 F1_05    437.
##  6  195. a     tulemupepelako     89.8 F1_05    800.
##  7  195. o     tulemupepelako     98.5 F1_05    482.
##  8  194. u     tulemupepelako     43.3 F1_10    439.
##  9  194. e     tulemupepelako    103.  F1_10    517.
## 10  194. u     tulemupepelako     14.1 F1_10    288.
## # … with 389 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a column &lt;code&gt;formant&lt;/code&gt; with the formant plus interval label, and a column &lt;code&gt;value&lt;/code&gt; with its value (in Hertz in our case).&lt;/p&gt;
&lt;p&gt;The next step is to separate the label of the formant plus interval into two separate columns: one for &lt;code&gt;formant&lt;/code&gt;, and one for &lt;code&gt;interval&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories_sep &amp;lt;- separate(trajectories_gath, formant, c(&amp;quot;formant&amp;quot;, &amp;quot;interval&amp;quot;), convert = TRUE)
trajectories_sep&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 399 x 7
##     Time Vowel Word           Duration formant interval value
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
##  1  194. u     tulemupepelako     43.3 F1             5  406.
##  2  194. e     tulemupepelako    103.  F1             5  503.
##  3  194. u     tulemupepelako     14.1 F1             5  290.
##  4  194. e     tulemupepelako     75.7 F1             5  440.
##  5  194. e     tulemupepelako     68.2 F1             5  437.
##  6  195. a     tulemupepelako     89.8 F1             5  800.
##  7  195. o     tulemupepelako     98.5 F1             5  482.
##  8  194. u     tulemupepelako     43.3 F1            10  439.
##  9  194. e     tulemupepelako    103.  F1            10  517.
## 10  194. u     tulemupepelako     14.1 F1            10  288.
## # … with 389 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can create individual columns for each formant from F1 to F3.
We can achieve this with &lt;code&gt;spread()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories_spr &amp;lt;- spread(trajectories_sep, formant, value)
trajectories_spr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 133 x 8
##     Time Vowel Word           Duration interval    F1    F2    F3
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  194. u     tulemupepelako     43.3        5  406. 1205. 2626.
##  2  194. u     tulemupepelako     43.3       10  439. 1226. 2556.
##  3  194. u     tulemupepelako     43.3       15  453. 1246. 2507.
##  4  194. u     tulemupepelako     43.3       20  456. 1291. 2451.
##  5  194. u     tulemupepelako     43.3       25  430. 1418. 2331.
##  6  194. u     tulemupepelako     43.3       30  357. 1555. 2268.
##  7  194. u     tulemupepelako     43.3       35  314. 1603. 2335.
##  8  194. u     tulemupepelako     43.3       40  288. 1709. 2437.
##  9  194. u     tulemupepelako     43.3       45  286. 1712. 2461.
## 10  194. u     tulemupepelako     43.3       50  327. 1747. 2470.
## # … with 123 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we have now is a long format dataset, with separate columns for each formant, and individual rows for each vowel interval.&lt;/p&gt;
&lt;div id=&#34;the-pipe-chain&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The pipe chain&lt;/h2&gt;
&lt;p&gt;All the steps above can be chained by using the pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories &amp;lt;- trajectories %&amp;gt;%
  gather(&amp;quot;formant&amp;quot;, &amp;quot;value&amp;quot;, F1_05:F3_95) %&amp;gt;%
  separate(formant, c(&amp;quot;formant&amp;quot;, &amp;quot;interval&amp;quot;), convert = TRUE) %&amp;gt;%
  spread(formant, value)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can finally easily plot the formant trajectories.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories %&amp;gt;%
  ggplot(aes(x = interval)) +
  geom_smooth(aes(y = F1), se = FALSE, colour = &amp;quot;red&amp;quot;) +
  geom_smooth(aes(y = F2), se = FALSE, colour = &amp;quot;green&amp;quot;) +
  geom_smooth(aes(y = F3), se = FALSE, colour = &amp;quot;blue&amp;quot;) +
  facet_wrap(~ Vowel) +
  ylab(&amp;quot;Hertz&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;
## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;
## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://stefanocoretta.github.io/post/2018-03-02-vowel-formants-trajectories-and-tidy-data_files/figure-html/trajectory-plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2 unnumbered&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-wickham2014&#34;&gt;
&lt;p&gt;Wickham, Hadley. 2014. “Tidy Data.” &lt;em&gt;Journal of Statistical Software&lt;/em&gt; 59 (10): 1–23. &lt;a href=&#34;https://doi.org/10.18637/jss.v059.i10&#34;&gt;https://doi.org/10.18637/jss.v059.i10&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
