<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggplot2 | Stefano Coretta</title>
    <link>https://stefanocoretta.github.io/tags/ggplot2/</link>
      <atom:link href="https://stefanocoretta.github.io/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    <description>ggplot2</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-uk</language><copyright>© 2017-2020 Stefano Coretta</copyright><lastBuildDate>Tue, 22 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>ggplot2</title>
      <link>https://stefanocoretta.github.io/tags/ggplot2/</link>
    </image>
    
    <item>
      <title>How to globally set colour scales in ggplot2</title>
      <link>https://stefanocoretta.github.io/post/2020-12-22-set-global-ggplot2/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://stefanocoretta.github.io/post/2020-12-22-set-global-ggplot2/</guid>
      <description>
&lt;script src=&#34;https://stefanocoretta.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;After the post on using custom typefaces in ggplot2 (&lt;a href=&#34;../custom-fonts-ggplot2&#34;&gt;here&lt;/a&gt;), this time I’ll briefly discuss how to set colour scales in ggplot2 globally in an &lt;code&gt;.Rmd&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;The perk of setting scales globally is that you can set the colours once at the beginning of the &lt;code&gt;.Rmd&lt;/code&gt; file and all the plots in the file will adhere to the specified scales without the need to repeat code.&lt;/p&gt;
&lt;div id=&#34;set-ggplot2-options&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Set ggplot2 options&lt;/h2&gt;
&lt;p&gt;The most robust way of specifying global colour scales for ggplot2 plots is to set the appropriate ggplot2 options with &lt;code&gt;options()&lt;/code&gt; at the beginning of the &lt;code&gt;.Rmd&lt;/code&gt; file.
I generally do so in the &lt;code&gt;setup&lt;/code&gt; chunk, where I also load the tidyverse/ggplot2 with &lt;code&gt;library(tidyverse)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The relevant options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ggplot2.discrete.colour&lt;/code&gt;: sets the colour scale for discrete aesthetics.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggplot2.discrete.fill&lt;/code&gt;: sets the fill scale for discrete aesthetics.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggplot2.continuous.colour&lt;/code&gt;: sets the colour scale for continuous aesthetics.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggplot2.continous.fill&lt;/code&gt;: sets the fill scale for continuous aesthetics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these options take a character vector of colour names/codes or a function that returns such a vector (for the full documentation see &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/scale_colour_discrete.html?q=discrete%20colour%20scales&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/scale_colour_continuous.html&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# names
options(ggplot2.discrete.fill = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;, &amp;quot;purple&amp;quot;, &amp;quot;yellow&amp;quot;))

# hex codes
options(ggplot2.discrete.fill = c(&amp;quot;#264653&amp;quot;, &amp;quot;#2a9d8f&amp;quot;, &amp;quot;#a8dadc&amp;quot;, &amp;quot;#457b9d&amp;quot;, &amp;quot;#e76f51&amp;quot;))

# function
options(ggplot2.discrete.fill = RColorBrewer::brewer.pal(12, &amp;quot;Set3&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the colours specified with &lt;code&gt;ggplot2.discrete.*&lt;/code&gt; will be used only if there are as many colours in the vector/function output as the number of data levels, or more.
When the number of level exceeds the number of colours, ggplot2 falls back to &lt;code&gt;scale_colour_hue()/scale_fill_hue()&lt;/code&gt; to construct the scale.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;colours-in-action&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Colours in action&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse) # or library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(ggplot2.discrete.fill = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;, &amp;quot;purple&amp;quot;, &amp;quot;yellow&amp;quot;))

mpg %&amp;gt;%
  filter(!(class %in% c(&amp;quot;subcompact&amp;quot;, &amp;quot;suv&amp;quot;))) %&amp;gt;%
  ggplot(aes(class, fill = class)) +
  geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://stefanocoretta.github.io/post/2020-12-22-set-global-ggplot2_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(ggplot2.discrete.fill = c(&amp;quot;#264653&amp;quot;, &amp;quot;#2a9d8f&amp;quot;, &amp;quot;#a8dadc&amp;quot;, &amp;quot;#457b9d&amp;quot;, &amp;quot;#e76f51&amp;quot;))

mpg %&amp;gt;%
  filter(!(class %in% c(&amp;quot;subcompact&amp;quot;, &amp;quot;suv&amp;quot;))) %&amp;gt;%
  ggplot(aes(class, fill = class)) +
  geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://stefanocoretta.github.io/post/2020-12-22-set-global-ggplot2_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(ggplot2.discrete.fill = RColorBrewer::brewer.pal(12, &amp;quot;Set3&amp;quot;))

mpg %&amp;gt;%
  filter(!(class %in% c(&amp;quot;subcompact&amp;quot;, &amp;quot;suv&amp;quot;))) %&amp;gt;%
  ggplot(aes(class, fill = class)) +
  geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://stefanocoretta.github.io/post/2020-12-22-set-global-ggplot2_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to use custom typefaces in ggplot2 [macOS only]</title>
      <link>https://stefanocoretta.github.io/post/custom-fonts-ggplot2/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://stefanocoretta.github.io/post/custom-fonts-ggplot2/</guid>
      <description>
&lt;script src=&#34;https://stefanocoretta.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I keep hitting my head against this particular (and seemingly simple) task: &lt;strong&gt;using custom typefaces in ggplot2 plots&lt;/strong&gt; and &lt;strong&gt;being able to knit to PDF&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The main reason for why I would want to do that is that I often find myself in need of including &lt;a href=&#34;https://www.internationalphoneticassociation.org/content/ipa-chart&#34;&gt;IPA&lt;/a&gt; symbols in plots (more often than not, it’s vowels) and that I want those plots to be included in a knitted PDF.&lt;/p&gt;
&lt;p&gt;For some reason, when I think I got it, I have to search again because the solution I previously found no longer works.&lt;/p&gt;
&lt;p&gt;So now I took the time to play around with different options and packages, and I found the minimal configuration one needs to use custom typefaces in ggplot2 plots and get a PDF document with those plots embedded in it (it is working as of December 2020, not sure what the year will bring).&lt;/p&gt;
&lt;p&gt;In the following sections I will show what this configuration looks like.
Note that this post covers only R running on macOS and that things will be different perhaps on Linux and for sure on Windows (maybe I’ll cover those OSs in an update later on).&lt;/p&gt;
&lt;p&gt;You can check out my full session info below, but just be aware that I am using R 4.0.3 in macOS Big Sur 11.1, with the latest version of the tidyverse packages at the time of writing.&lt;/p&gt;
&lt;div id=&#34;enable-custom-typefaces-in-ggplot2-plots-when-knitting-to-pdf&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Enable custom typefaces in ggplot2 plots when knitting to PDF&lt;/h2&gt;
&lt;p&gt;I was surprised to find out that to include custom typefaces in ggplot2 plots and knit the &lt;code&gt;.Rmd&lt;/code&gt; to a PDF document, you just need the following options in your YAML preamble (no need for extra packages!!!).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;---
output:
  pdf_document:
    latex_engine: xelatex
    dev: cairo_pdf
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In particular, the &lt;code&gt;dev&lt;/code&gt; option sets &lt;code&gt;cairo_pdf()&lt;/code&gt; (shipped with ggplot2) as the default device for rendering the plots within the knitted PDF document.&lt;/p&gt;
&lt;p&gt;As Miranda Priestly would say, &lt;em&gt;that’s all…&lt;/em&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Within your document you can then specify the typeface you want to use in the plots.
The most straightforward way is to set a ggplot2 theme and specify the &lt;code&gt;base_family&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse) # or library(ggplot2)
theme_set(theme_light(base_family = &amp;quot;Fira Sans&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I chose the &lt;a href=&#34;https://fonts.google.com/specimen/Fira+Sans&#34;&gt;Fira Sans&lt;/a&gt; fonts here because they include the Unicode range of the IPA.&lt;/p&gt;
&lt;p&gt;Both when running a chunk with a ggplot2 plot interactively in the &lt;code&gt;.Rmd&lt;/code&gt; file and when knitting the &lt;code&gt;.Rmd&lt;/code&gt; to a PDF, the plot typeface will be Fira Sans.
And we are done.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extra-saving-ggplot2-plots-to-a-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extra: Saving ggplot2 plots to a file&lt;/h2&gt;
&lt;p&gt;Now, what if you want to save the plots with your custom typeface to a file that you can include in another document?&lt;/p&gt;
&lt;p&gt;You have two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can save the plot as a standalone PDF file (with embedded fonts).&lt;/li&gt;
&lt;li&gt;Or you can save the plot as a &lt;code&gt;.png&lt;/code&gt; image.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Achieving that is quite simple with &lt;code&gt;ggsave()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# let&amp;#39;s prepare a plot which will use our custom fonts
p &amp;lt;- ggplot(mpg, aes(class)) +
  geom_bar()

# save to pdf
ggsave(p, &amp;quot;./plot.pdf&amp;quot;, device = cairo_pdf, width = 7, height = 5)

# save to png
ggsave(p, &amp;quot;./plot.png&amp;quot;, width = 7, height = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The magic is done by &lt;code&gt;ggsave(..., device = cairo_pdf)&lt;/code&gt; (that’s the same &lt;code&gt;cairo_pdf&lt;/code&gt; device we set in the YAML preamble).
Note that it’s &lt;code&gt;cairo_pdf&lt;/code&gt; and not &lt;code&gt;cairo_pdf()&lt;/code&gt; (for reasons beyond my comprehension, it does not work if you add the parentheses).&lt;/p&gt;
&lt;p&gt;Here you find a &lt;a href=&#34;https://gist.github.com/stefanocoretta/c9e3c0d8a72739c7ebb3a30d11e4c134&#34;&gt;gist&lt;/a&gt; with an example &lt;code&gt;.Rmd&lt;/code&gt; file that you can download on your machine and knit as a test.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;supported-fonts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Supported fonts&lt;/h2&gt;
&lt;p&gt;As far as I can tell, any &lt;code&gt;.ttf&lt;/code&gt; (TrueType font) installed on your system with Font Book can be set as the typeface to be used in the ggplot2 plots.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;session-info&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Session info&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ─ Session info ───────────────────────────────────────────────────────────────
##  setting  value                       
##  version  R version 4.0.3 (2020-10-10)
##  os       macOS Big Sur 10.16         
##  system   x86_64, darwin17.0          
##  ui       X11                         
##  language (EN)                        
##  collate  en_GB.UTF-8                 
##  ctype    en_GB.UTF-8                 
##  tz       Europe/Berlin               
##  date     2020-12-22                  
## 
## ─ Packages ───────────────────────────────────────────────────────────────────
##  package     * version date       lib source        
##  assertthat    0.2.1   2019-03-21 [1] CRAN (R 4.0.2)
##  blogdown      0.21    2020-10-11 [1] CRAN (R 4.0.2)
##  bookdown      0.21    2020-10-13 [1] CRAN (R 4.0.2)
##  callr         3.5.1   2020-10-13 [1] CRAN (R 4.0.2)
##  cli           2.2.0   2020-11-20 [1] CRAN (R 4.0.2)
##  crayon        1.3.4   2017-09-16 [1] CRAN (R 4.0.2)
##  desc          1.2.0   2018-05-01 [1] CRAN (R 4.0.2)
##  devtools      2.3.2   2020-09-18 [1] CRAN (R 4.0.2)
##  digest        0.6.27  2020-10-24 [1] CRAN (R 4.0.2)
##  ellipsis      0.3.1   2020-05-15 [1] CRAN (R 4.0.2)
##  evaluate      0.14    2019-05-28 [1] CRAN (R 4.0.1)
##  fansi         0.4.1   2020-01-08 [1] CRAN (R 4.0.2)
##  fs            1.5.0   2020-07-31 [1] CRAN (R 4.0.2)
##  glue          1.4.2   2020-08-27 [1] CRAN (R 4.0.2)
##  htmltools     0.5.0   2020-06-16 [1] CRAN (R 4.0.2)
##  knitr         1.30    2020-09-22 [1] CRAN (R 4.0.2)
##  lifecycle     0.2.0   2020-03-06 [1] CRAN (R 4.0.2)
##  magrittr      2.0.1   2020-11-17 [1] CRAN (R 4.0.2)
##  memoise       1.1.0   2017-04-21 [1] CRAN (R 4.0.2)
##  pkgbuild      1.2.0   2020-12-15 [1] CRAN (R 4.0.2)
##  pkgload       1.1.0   2020-05-29 [1] CRAN (R 4.0.2)
##  prettyunits   1.1.1   2020-01-24 [1] CRAN (R 4.0.2)
##  processx      3.4.5   2020-11-30 [1] CRAN (R 4.0.2)
##  ps            1.5.0   2020-12-05 [1] CRAN (R 4.0.2)
##  purrr         0.3.4   2020-04-17 [1] CRAN (R 4.0.2)
##  R6            2.5.0   2020-10-28 [1] CRAN (R 4.0.2)
##  remotes       2.2.0   2020-07-21 [1] CRAN (R 4.0.2)
##  rlang         0.4.9   2020-11-26 [1] CRAN (R 4.0.2)
##  rmarkdown     2.6     2020-12-14 [1] CRAN (R 4.0.2)
##  rprojroot     2.0.2   2020-11-15 [1] CRAN (R 4.0.2)
##  sessioninfo   1.1.1   2018-11-05 [1] CRAN (R 4.0.2)
##  stringi       1.5.3   2020-09-09 [1] CRAN (R 4.0.2)
##  stringr       1.4.0   2019-02-10 [1] CRAN (R 4.0.2)
##  testthat      3.0.1   2020-12-17 [1] CRAN (R 4.0.2)
##  usethis       2.0.0   2020-12-10 [1] CRAN (R 4.0.2)
##  withr         2.3.0   2020-09-22 [1] CRAN (R 4.0.2)
##  xfun          0.19    2020-10-30 [1] CRAN (R 4.0.2)
##  yaml          2.2.1   2020-02-01 [1] CRAN (R 4.0.2)
## 
## [1] /Users/stefano/rlib
## [2] /Library/Frameworks/R.framework/Versions/4.0/Resources/library&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://media.giphy.com/media/3o6gDY8zzwvNQdFCaQ/giphy.gif&#34; class=&#34;uri&#34;&gt;https://media.giphy.com/media/3o6gDY8zzwvNQdFCaQ/giphy.gif&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Vowel formants trajectories and tidy data</title>
      <link>https://stefanocoretta.github.io/post/vowel-formants-trajectories-and-tidy-data/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://stefanocoretta.github.io/post/vowel-formants-trajectories-and-tidy-data/</guid>
      <description>
&lt;script src=&#34;https://stefanocoretta.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;With the advent of more powerful statistical methods for accessing time series data, it is now more common to compare whole vowel formant trajectories rather then just using average formant values.&lt;/p&gt;
&lt;p&gt;Sometimes, the output of the Praat script used for extracting formats data gives us a ‘wide format’ dataset.
In this format, separate columns contain formant values for each interval within the vowel.
Normally, values are extracted every 10% or 5% intervals within the vowel.&lt;/p&gt;
&lt;p&gt;To work with formant trajectories data in &lt;code&gt;R&lt;/code&gt;, we need instead a ‘long format’ dataset.
In a long format dataset, the percent intervals are layed out in rows, rather then columns.&lt;/p&gt;
&lt;p&gt;We start by reading in the formant data, which were kindly provided by &lt;a href=&#34;http://tiny.cc/sjn&#34;&gt;Stephen Nichols&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories &amp;lt;- read_csv(&amp;quot;./static/data/nichols-2018/tulemupepelako.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## ── Column specification ────────────────────────────────────────────────────────
## cols(
##   .default = col_double(),
##   Vowel = col_character(),
##   Word = col_character()
## )
## ℹ Use `spec()` for the full column specifications.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 61
##    Time Vowel Word  Duration F1_05 F1_10 F1_15 F1_20 F1_25 F1_30 F1_35 F1_40
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1  194. u     tule…     43.3  406.  439.  453.  456.  430.  357.  314.  288.
## 2  194. e     tule…    103.   503.  517.  537.  564.  556.  362.  315.  295.
## 3  194. u     tule…     14.1  290.  288.  286.  283.  281.  281.  282.  295.
## 4  194. e     tule…     75.7  440.  441.  439.  429.  386.  269.  250.  318.
## 5  194. e     tule…     68.2  437.  445.  479.  562.  622.  605.  523.  618.
## 6  195. a     tule…     89.8  800.  736.  662.  543.  447.  564.  768.  358.
## 7  195. o     tule…     98.5  482.  463.  471.  326.  316.  573. 1511. 1389.
## # … with 49 more variables: F1_45 &amp;lt;dbl&amp;gt;, F1_50 &amp;lt;dbl&amp;gt;, F1_55 &amp;lt;dbl&amp;gt;, F1_60 &amp;lt;dbl&amp;gt;,
## #   F1_65 &amp;lt;dbl&amp;gt;, F1_70 &amp;lt;dbl&amp;gt;, F1_75 &amp;lt;dbl&amp;gt;, F1_80 &amp;lt;dbl&amp;gt;, F1_85 &amp;lt;dbl&amp;gt;,
## #   F1_90 &amp;lt;dbl&amp;gt;, F1_95 &amp;lt;dbl&amp;gt;, F2_05 &amp;lt;dbl&amp;gt;, F2_10 &amp;lt;dbl&amp;gt;, F2_15 &amp;lt;dbl&amp;gt;,
## #   F2_20 &amp;lt;dbl&amp;gt;, F2_25 &amp;lt;dbl&amp;gt;, F2_30 &amp;lt;dbl&amp;gt;, F2_35 &amp;lt;dbl&amp;gt;, F2_40 &amp;lt;dbl&amp;gt;,
## #   F2_45 &amp;lt;dbl&amp;gt;, F2_50 &amp;lt;dbl&amp;gt;, F2_55 &amp;lt;dbl&amp;gt;, F2_60 &amp;lt;dbl&amp;gt;, F2_65 &amp;lt;dbl&amp;gt;,
## #   F2_70 &amp;lt;dbl&amp;gt;, F2_75 &amp;lt;dbl&amp;gt;, F2_80 &amp;lt;dbl&amp;gt;, F2_85 &amp;lt;dbl&amp;gt;, F2_90 &amp;lt;dbl&amp;gt;,
## #   F2_95 &amp;lt;dbl&amp;gt;, F3_05 &amp;lt;dbl&amp;gt;, F3_10 &amp;lt;dbl&amp;gt;, F3_15 &amp;lt;dbl&amp;gt;, F3_20 &amp;lt;dbl&amp;gt;,
## #   F3_25 &amp;lt;dbl&amp;gt;, F3_30 &amp;lt;dbl&amp;gt;, F3_35 &amp;lt;dbl&amp;gt;, F3_40 &amp;lt;dbl&amp;gt;, F3_45 &amp;lt;dbl&amp;gt;,
## #   F3_50 &amp;lt;dbl&amp;gt;, F3_55 &amp;lt;dbl&amp;gt;, F3_60 &amp;lt;dbl&amp;gt;, F3_65 &amp;lt;dbl&amp;gt;, F3_70 &amp;lt;dbl&amp;gt;,
## #   F3_75 &amp;lt;dbl&amp;gt;, F3_80 &amp;lt;dbl&amp;gt;, F3_85 &amp;lt;dbl&amp;gt;, F3_90 &amp;lt;dbl&amp;gt;, F3_95 &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dataset contains formant values of F1-F3 at 5% intervals for the vowels of the word &lt;em&gt;tulemupepelako&lt;/em&gt; ‘we are praying for her’ (Bemba, [&lt;code&gt;bemb1257&lt;/code&gt;]).
It’s a toy dataset of course, just for purpose of illustration, so not very exciting!&lt;/p&gt;
&lt;p&gt;The values for each 5% interval for each formant are in separate columns.
For plotting and modelling, though, we need the data to be in a ‘tidy’ format &lt;span class=&#34;citation&#34;&gt;(Wickham 2014)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each observation unit is in a separate row&lt;/li&gt;
&lt;li&gt;each variable is a separate column&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our case, each observation unit is a 5% interval.
As for the variables, they are: time in the recording, word, vowel, vowel duration, F1, F2, and F3.&lt;/p&gt;
&lt;p&gt;The first step towards a long format data set is to gather all the columns that have formant values to a column indicating the formant plus interval (like ‘F1_05’) and the value of that formant in that interval.
We can use &lt;code&gt;gather()&lt;/code&gt; for this.&lt;/p&gt;
&lt;p&gt;In the following chunks, I will illustrate the results of each step separately by saving the output of the functions to variables.
Later in this post, you’ll find a pipe chain with all functions without intermediate outputs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories_gath &amp;lt;- gather(trajectories, &amp;quot;formant&amp;quot;, &amp;quot;value&amp;quot;, F1_05:F3_95)
trajectories_gath&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 399 x 6
##     Time Vowel Word           Duration formant value
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt;
##  1  194. u     tulemupepelako     43.3 F1_05    406.
##  2  194. e     tulemupepelako    103.  F1_05    503.
##  3  194. u     tulemupepelako     14.1 F1_05    290.
##  4  194. e     tulemupepelako     75.7 F1_05    440.
##  5  194. e     tulemupepelako     68.2 F1_05    437.
##  6  195. a     tulemupepelako     89.8 F1_05    800.
##  7  195. o     tulemupepelako     98.5 F1_05    482.
##  8  194. u     tulemupepelako     43.3 F1_10    439.
##  9  194. e     tulemupepelako    103.  F1_10    517.
## 10  194. u     tulemupepelako     14.1 F1_10    288.
## # … with 389 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a column &lt;code&gt;formant&lt;/code&gt; with the formant plus interval label, and a column &lt;code&gt;value&lt;/code&gt; with its value (in Hertz in our case).&lt;/p&gt;
&lt;p&gt;The next step is to separate the label of the formant plus interval into two separate columns: one for &lt;code&gt;formant&lt;/code&gt;, and one for &lt;code&gt;interval&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories_sep &amp;lt;- separate(trajectories_gath, formant, c(&amp;quot;formant&amp;quot;, &amp;quot;interval&amp;quot;), convert = TRUE)
trajectories_sep&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 399 x 7
##     Time Vowel Word           Duration formant interval value
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
##  1  194. u     tulemupepelako     43.3 F1             5  406.
##  2  194. e     tulemupepelako    103.  F1             5  503.
##  3  194. u     tulemupepelako     14.1 F1             5  290.
##  4  194. e     tulemupepelako     75.7 F1             5  440.
##  5  194. e     tulemupepelako     68.2 F1             5  437.
##  6  195. a     tulemupepelako     89.8 F1             5  800.
##  7  195. o     tulemupepelako     98.5 F1             5  482.
##  8  194. u     tulemupepelako     43.3 F1            10  439.
##  9  194. e     tulemupepelako    103.  F1            10  517.
## 10  194. u     tulemupepelako     14.1 F1            10  288.
## # … with 389 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can create individual columns for each formant from F1 to F3.
We can achieve this with &lt;code&gt;spread()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories_spr &amp;lt;- spread(trajectories_sep, formant, value)
trajectories_spr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 133 x 8
##     Time Vowel Word           Duration interval    F1    F2    F3
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  194. u     tulemupepelako     43.3        5  406. 1205. 2626.
##  2  194. u     tulemupepelako     43.3       10  439. 1226. 2556.
##  3  194. u     tulemupepelako     43.3       15  453. 1246. 2507.
##  4  194. u     tulemupepelako     43.3       20  456. 1291. 2451.
##  5  194. u     tulemupepelako     43.3       25  430. 1418. 2331.
##  6  194. u     tulemupepelako     43.3       30  357. 1555. 2268.
##  7  194. u     tulemupepelako     43.3       35  314. 1603. 2335.
##  8  194. u     tulemupepelako     43.3       40  288. 1709. 2437.
##  9  194. u     tulemupepelako     43.3       45  286. 1712. 2461.
## 10  194. u     tulemupepelako     43.3       50  327. 1747. 2470.
## # … with 123 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we have now is a long format dataset, with separate columns for each formant, and individual rows for each vowel interval.&lt;/p&gt;
&lt;div id=&#34;the-pipe-chain&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The pipe chain&lt;/h2&gt;
&lt;p&gt;All the steps above can be chained by using the pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories &amp;lt;- trajectories %&amp;gt;%
  gather(&amp;quot;formant&amp;quot;, &amp;quot;value&amp;quot;, F1_05:F3_95) %&amp;gt;%
  separate(formant, c(&amp;quot;formant&amp;quot;, &amp;quot;interval&amp;quot;), convert = TRUE) %&amp;gt;%
  spread(formant, value)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can finally easily plot the formant trajectories.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trajectories %&amp;gt;%
  ggplot(aes(x = interval)) +
  geom_smooth(aes(y = F1), se = FALSE, colour = &amp;quot;red&amp;quot;) +
  geom_smooth(aes(y = F2), se = FALSE, colour = &amp;quot;green&amp;quot;) +
  geom_smooth(aes(y = F3), se = FALSE, colour = &amp;quot;blue&amp;quot;) +
  facet_wrap(~ Vowel) +
  ylab(&amp;quot;Hertz&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;
## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;
## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://stefanocoretta.github.io/post/2018-03-02-vowel-formants-trajectories-and-tidy-data_files/figure-html/trajectory-plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2 unnumbered&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34;&gt;
&lt;div id=&#34;ref-wickham2014&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Wickham, Hadley. 2014. &lt;span&gt;“Tidy Data.”&lt;/span&gt; &lt;em&gt;Journal of Statistical Software&lt;/em&gt; 59 (10): 1–23.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
